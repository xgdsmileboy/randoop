<!--
   Copyright 2003-2004 The Apache Software Foundation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
<project name="primitives" default="compile" basedir=".">


<!--
        "Primitives" component of the Jakarta Commons Subproject
        $Id: build.xml,v 1.11 2004/07/29 22:30:55 scolebourne Exp $
-->


<!-- ========== Initialize Properties ===================================== -->


  <property file="build.properties"/>                <!-- Component local   -->
  <property file="../build.properties"/>             <!-- Commons local     -->
  <property file="${user.home}/build.properties"/>   <!-- User local        -->


<!-- ========== External Dependencies ===================================== -->


  <!-- The directory containing your binary distribution of JUnit,
       version 3.8.1 or later -->
  <property name="junit.home"              value="/usr/local/junit3.8.1"/>


<!-- ========== Derived Values ============================================ -->


  <!-- The pathname of the "junit.jar" JAR file -->
  <property name="junit.jar"               value="${junit.home}/junit.jar"/>


<!-- ========== Component Declarations ==================================== -->


  <!-- The name of this component -->
  <property name="component.name"          value="primitives"/>

  <!-- The primary package name of this component -->
  <property name="component.package"       value="org.apache.commons.primitives"/>

  <!-- The title of this component -->
  <property name="component.title"         value="Primitive type utilities"/>

  <!-- The current version number of this component -->
  <property name="component.version"       value="1.1-dev"/>

  <!-- The final name of the component -->
  <property name="final.name"              value="commons-${component.name}-${component.version}"/>

  <!-- The final source name of the component -->
  <property name="final.name.src"          value="${final.name}-src"/>

  <!-- The base directory for component sources -->
  <property name="source"                  value="src"/>

  <!-- The base directory for component sources -->
  <property name="source.home"             value="src/java"/>

  <!-- The base directory for unit test sources -->
  <property name="test.home"               value="src/test"/>
  
  <!-- The base directory for component configuration files -->
  <property name="conf.home"               value="src/conf"/>

  <!-- The base directory for targets -->
  <property name="target"                  value="target"/>

  <!-- The directory for compiled classes -->
  <property name="target.class"            value="${target}/classes"/>

  <!-- The directory for compiled test classes -->
  <property name="target.class.test"       value="${target}/test-classes"/>

  <!-- The directory for filtered conf files -->
  <property name="target.conf"             value="${target}/conf"/>

  <!-- The directory for javadoc -->
  <property name="target.javadoc"          value="${target}/docs"/>

  <!-- The base directory for assembling zips -->
  <property name="target.assembly"         value="${target}/${final.name}"/>
  
  <!-- The base directory for assembling zips -->
  <property name="target.assembly.src"         value="${target}/${final.name.src}"/>


<!-- ========== Compiler Defaults ========================================= -->


  <!-- Should Java compilations set the 'debug' compiler option? -->
  <property name="compile.debug"           value="true"/>

  <!-- Should Java compilations set the 'deprecation' compiler option? -->
  <property name="compile.deprecation"     value="true"/>

  <!-- Should Java compilations set the 'optimize' compiler option? -->
  <property name="compile.optimize"        value="true"/>

  <!-- Construct compile classpath -->
  <path id="compile.classpath">
    <pathelement location="${target}/classes"/>
  </path>


<!-- ========== Test Execution Defaults =================================== -->


  <!-- Construct unit test classpath -->
  <path id="test.classpath">
    <pathelement location="${target.class}"/>
    <pathelement location="${target.class.test}"/>
    <pathelement location="${junit.jar}"/>
    <pathelement location="${collections-testframework.jar}"/>
  </path>

  <!-- Should all tests fail if one does? -->
  <property name="test.failonerror"        value="true"/>

  <!-- The test runner to execute -->
  <property name="test.runner"             value="junit.textui.TestRunner"/>


<!-- ========== Executable Targets ======================================== -->


  <target name="init" description="Initialize and evaluate conditionals">
    <echo message="-------- ${component.name} ${component.version} --------"/>
    <filter  token="name"                  value="${component.name}"/>
    <filter  token="package"               value="${component.package}"/>
    <filter  token="version"               value="${component.version}"/>
  </target>


  <target name="prepare" depends="init" description="Prepare build directory">
    <mkdir dir="${target}"/>
    <mkdir dir="${target.class}"/>
    <mkdir dir="${target.class.test}"/>
    <mkdir dir="${target.conf}"/>
  </target>


  <target name="static" depends="prepare" description="Copy static files to build directory">
    <tstamp/>
    <copy  todir="${target.conf}" filtering="on">
      <fileset dir="${conf.home}" includes="*.MF"/>
    </copy>
  </target>


  <target name="compile" depends="static" description="Compile main classes">
    <javac  srcdir="${source.home}"
           destdir="${target.class}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>


  <target name="compile.tests" depends="compile" description="Compile unit test classes">
    <javac  srcdir="${test.home}"
           destdir="${target.class.test}"
             debug="${compile.debug}"
       deprecation="${compile.deprecation}"
          optimize="${compile.optimize}">
      <classpath refid="test.classpath"/>
    </javac>
  </target>


  <target name="jar" depends="compile" description="Create jar">
    <mkdir dir="${target.class}/META-INF"/>
    <copy file="LICENSE.txt" tofile="${target.class}/META-INF/LICENSE.txt"/>
    <jar jarfile="${target}/${final.name}.jar"
         basedir="${target.class}"
         manifest="${target.conf}/MANIFEST.MF"/>
  </target>


  <target name="clean" description="Clean build and distribution directories">
    <delete dir="${target}"/>
  </target>


  <target name="all" depends="clean,compile" description="Clean and compile all components"/>


  <target name="javadoc" depends="compile" description="Create component Javadoc documentation">
    <mkdir dir="${target.javadoc}/api"/>
    <javadoc sourcepath="${source.home}"
                destdir="${target.javadoc}/api"
           packagenames="org.apache.commons.*"
                 author="true"
                private="true"
                version="true"
               doctitle="&lt;h1&gt;${component.title}&lt;/h1&gt;"
            windowtitle="${component.title} (Version ${component.version})"
                 bottom="Copyright (c) 2002-2004 - Apache Software Foundation">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>


  <target name="dist" depends="dist-bin,dist-src" description="Create distribution">
  </target>
  
  
  <target name="dist-bin" depends="compile,test,jar,javadoc" description="Create binary distribution">
    <mkdir dir="${target.assembly}"/>
    
    <copy file="LICENSE.txt" todir="${target.assembly}"/>
    <copy file="RELEASE-NOTES.txt" todir="${target.assembly}"/>
    <copy file="${target}/${final.name}.jar" todir="${target.assembly}"/>
    <mkdir dir="${target.assembly}/docs"/>
    <copy todir="${target.assembly}/docs">
      <fileset dir="${target.javadoc}"/>
    </copy>
    
	<tar destfile="${target}/${final.name}.tar" basedir="${target.assembly}"/>
	<gzip zipfile="${target}/${final.name}.tar.gz" src="${target}/${final.name}.tar"/>
	<delete file="${target}/${final.name}.tar"/>
	
	<fixcrlf srcdir="${target.assembly}" eol="crlf" includes="**/*.txt"/>
	<zip destfile="${target}/${final.name}.zip" basedir="${target.assembly}"/>
	
	<delete dir="${target.assembly}"/>
  </target>
  
  <target name="dist-src" depends="compile,test,jar" description="Create source distribution">
    <mkdir dir="${target.assembly.src}"/>
    
    <copy file="LICENSE.txt" todir="${target.assembly.src}"/>
    <copy file="RELEASE-NOTES.txt" todir="${target.assembly.src}"/>
    <copy file="build.xml" todir="${target.assembly.src}"/>
    <copy file="maven.xml" todir="${target.assembly.src}"/>
    <copy file="project.properties" todir="${target.assembly.src}"/>
    <copy file="project.xml" todir="${target.assembly.src}"/>
    <copy file="checkstyle.xml" todir="${target.assembly.src}"/>
    <copy file="${target}/${final.name}.jar" todir="${target.assembly.src}"/>
    <mkdir dir="${target.assembly.src}/${source}"/>
    <copy todir="${target.assembly.src}/${source}">
      <fileset dir="${source}"/>
    </copy>
    
	<tar destfile="${target}/${final.name.src}.tar" basedir="${target.assembly.src}"/>
	<gzip zipfile="${target}/${final.name.src}.tar.gz" src="${target}/${final.name.src}.tar"/>
	<delete file="${target}/${final.name.src}.tar"/>
	
	<fixcrlf srcdir="${target.assembly.src}" eol="crlf" includes="**/*.txt"/>
	<fixcrlf srcdir="${target.assembly.src}" eol="crlf" includes="**/*.xml"/>
	<fixcrlf srcdir="${target.assembly.src}" eol="crlf" includes="**/*.properties"/>
	<zip destfile="${target}/${final.name.src}.zip" basedir="${target.assembly.src}"/>
	
	<delete dir="${target.assembly.src}"/>
  </target>


<!-- ========== Unit Test Targets ========================================= -->


  <target name="test"  depends="compile.tests,
                                test.primitives"
   description="Run all unit test cases">
  </target>


  <target name="test.primitives" depends="compile.tests">
    <echo message="Running primitives tests ..."/>
    <java classname="${test.runner}" fork="yes"
        failonerror="${test.failonerror}">
      <arg value="org.apache.commons.collections.primitives.AllTestSuite"/>
      <classpath refid="test.classpath"/>
    </java>
  </target>

</project>
