# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : short:-1 : 
var2 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:0 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:1 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim replace with var9 -1
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:-1 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:0 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:0 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim plus var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:1 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set to var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:1 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim plus var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:10 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set to var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:10 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim plus var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:100 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set to var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:100 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim plus var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:1000 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set to var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:1000 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim plus var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:10000 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim set to var9
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:10000 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:-1 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:0 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var7 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var14 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : long:100 : 
var1 =  cons : java2.util2.ArrayList.<init>() : 
var2 =  prim : int:0 : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var1 var5 var6 
var8 =  prim : long:100 : 
var9 =  method : java2.util2.ArrayList.add(java.lang.Object) : var1 var8 
var10 =  prim : int:0 : 
var11 =  prim : short:0 : 
var12 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var1 var10 var0 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var1 var13 
var15 =  prim : double:0.0 : 
var16 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var1 var15 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:1 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.add(int,java.lang.Object) : var0 var4 var5 
var7 =  prim : long:100 : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var7 
var9 =  prim : int:0 : 
var10 =  prim : short:0 : 
var11 =  method : java2.util2.ArrayList.set(int,java.lang.Object) : var0 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : java2.util2.BitSet:null : 
var2 =  method : java2.util2.BitSet.and(java2.util2.BitSet) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int) : var0 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : long:-1 : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  prim : double:10.0 : 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var4 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var1 var3 

END SEQUENCE
# prim replace with 100
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  method : java2.util2.Collections.shuffle(java2.util2.List) : var2 

END SEQUENCE
# prim replace with 4
START SEQUENCE
var0 =  prim : int:4 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  method : java2.util2.Collections.shuffle(java2.util2.List) : var2 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  cons : java2.util2.LinkedHashMap.<init>() : 
var6 =  prim : java2.util2.Collection:null : 
var7 =  method : java2.util2.HashMap.values() : var5 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var6 
var9 =  method : java2.util2.AbstractMap.toString() : var0 
var10 =  prim : java.lang.String:"" : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  cons : java2.util2.LinkedHashMap.<init>() : 
var18 =  method : java2.util2.HashMap.values() : var17 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var18 
var20 =  method : java2.util2.AbstractMap.toString() : var12 
var21 =  prim : java.lang.Object:null : 
var22 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var12 var21 
var23 =  prim : int:0 : 
var24 =  method : java2.util2.HashMap.remove(java.lang.Object) : var12 var23 
var25 =  method : java2.util2.AbstractMap.toString() : var12 
var26 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var12 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : double:-1.0 : 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  cons : java2.util2.LinkedHashMap.<init>() : 
var6 =  method : java2.util2.HashMap.values() : var5 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var6 
var8 =  method : java2.util2.AbstractMap.toString() : var0 
var9 =  prim : java.lang.String:"" : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  cons : java2.util2.LinkedHashMap.<init>() : 
var17 =  method : java2.util2.HashMap.values() : var16 
var18 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var6 
var19 =  method : java2.util2.AbstractMap.toString() : var11 
var20 =  prim : java.lang.Object:null : 
var21 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var11 var20 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.HashMap.remove(java.lang.Object) : var11 var22 
var24 =  method : java2.util2.AbstractMap.toString() : var11 
var25 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var11 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.IdentityHashMap.<init>() : 
var1 =  prim : float:100.0 : 
var2 =  method : java2.util2.IdentityHashMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:-1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashSet.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : double:1.0 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : double:1.0 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var1 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : float:0.0 : 
var9 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var0 var8 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:1.0 : 
var1 =  cons : java2.util2.LinkedList.<init>() : 
var2 =  prim : double:1.0 : 
var3 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.LinkedList.<init>() : 
var6 =  prim : double:1.0 : 
var7 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var5 var0 
var8 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var1 var4 var5 
var9 =  prim : float:0.0 : 
var10 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var1 var9 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : double:1.0 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : double:1.0 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var5 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : float:0.0 : 
var9 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : double:1.0 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : double:1.0 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var1 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var0 var8 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:1.0 : 
var1 =  cons : java2.util2.LinkedList.<init>() : 
var2 =  prim : double:1.0 : 
var3 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.LinkedList.<init>() : 
var6 =  prim : double:1.0 : 
var7 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var5 var0 
var8 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var1 var4 var5 
var9 =  prim : short:10 : 
var10 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var1 var9 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : double:1.0 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : double:1.0 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var5 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var0 var1 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:-100 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:101 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:110 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:200 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:1100 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:1000 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:10100 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:10000 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:99 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.Vector.setSize(int) : var0 var1 
var3 =  method : java2.util2.Stack.peek() : var0 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  method : java2.util2.TreeMap.firstKey() : var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var8 =  method : java2.util2.TreeMap.lastKey() : var0 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var14 =  method : java2.util2.TreeMap.size() : var9 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var9 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : char:23 : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  method : java2.util2.TreeMap.firstKey() : var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : char:23 : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.reverseOrder() : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : char:23 : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : char:23 : 
var2 =  prim : float:10.0 : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : float:-1.0 : 
var5 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var0 var2 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java2.util2.Comparator:null : 
var1 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var2 =  prim : byte:1 : 
var3 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var1 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var1 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var5 
var7 =  prim : int:0 : 
var8 =  cons : java2.util2.Vector.<init>(int) : var7 
var9 =  prim : int:0 : 
var10 =  prim : double:10.0 : 
var11 =  method : java2.util2.Vector.add(int,java.lang.Object) : var8 var9 var10 
var12 =  method : java2.util2.Vector.elements() : var8 
var13 =  prim : int:0 : 
var14 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var1 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Vector.removeElement(java.lang.Object) : var1 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  cons : java2.util2.Vector.<init>(int) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.addElement(java.lang.Object) : var3 var1 
var6 =  prim : int:0 : 
var7 =  cons : java2.util2.Vector.<init>(int) : var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var3 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : int:0 : 
var12 =  prim : double:10.0 : 
var13 =  method : java2.util2.Vector.add(int,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Vector.elements() : var10 
var15 =  prim : int:0 : 
var16 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var3 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Vector.removeElement(java.lang.Object) : var3 var17 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Vector.equals(java.lang.Object) : var3 var19 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var5 
var7 =  prim : int:0 : 
var8 =  cons : java2.util2.Vector.<init>(int) : var7 
var9 =  prim : int:0 : 
var10 =  prim : double:10.0 : 
var11 =  method : java2.util2.Vector.add(int,java.lang.Object) : var8 var9 var10 
var12 =  method : java2.util2.Vector.elements() : var8 
var13 =  prim : int:0 : 
var14 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var1 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Vector.removeElement(java.lang.Object) : var1 var1 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  cons : java2.util2.Vector.<init>(int) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.addElement(java.lang.Object) : var3 var4 
var6 =  prim : int:0 : 
var7 =  cons : java2.util2.Vector.<init>(int) : var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var3 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : int:0 : 
var12 =  prim : double:10.0 : 
var13 =  method : java2.util2.Vector.add(int,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Vector.elements() : var10 
var15 =  prim : int:0 : 
var16 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var3 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Vector.removeElement(java.lang.Object) : var3 var1 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Vector.equals(java.lang.Object) : var3 var19 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var5 
var7 =  prim : int:0 : 
var8 =  cons : java2.util2.Vector.<init>(int) : var7 
var9 =  prim : int:0 : 
var10 =  prim : double:10.0 : 
var11 =  method : java2.util2.Vector.add(int,java.lang.Object) : var8 var9 var10 
var12 =  method : java2.util2.Vector.elements() : var8 
var13 =  prim : int:0 : 
var14 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var1 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Vector.removeElement(java.lang.Object) : var1 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var1 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:1 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim replace with var22 -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:-1 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:1 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:1 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:10 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:10 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:100 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:100 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:1000 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:1000 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:10000 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var22
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:10000 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:-1 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim replace with var2 -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:2 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:11 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:101 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1001 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1000 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10001 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10000 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  method : java2.util2.Collections.reverseOrder() : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var14 =  prim : int:0 : 
var15 =  cons : java2.util2.Vector.<init>(int) : var14 
var16 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var15 
var17 =  prim : int:0 : 
var18 =  cons : java2.util2.Vector.<init>(int) : var17 
var19 =  prim : int:0 : 
var20 =  prim : double:10.0 : 
var21 =  method : java2.util2.Vector.add(int,java.lang.Object) : var18 var19 var20 
var22 =  method : java2.util2.Vector.elements() : var18 
var23 =  prim : int:0 : 
var24 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var22 var23 
var25 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var2 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var21 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:1 : 
var1 =  prim : int:0 : 
var2 =  cons : java2.util2.Vector.<init>(int) : var1 
var3 =  prim : int:1 : 
var4 =  method : java2.util2.Vector.add(java.lang.Object) : var2 var3 
var5 =  prim : int:0 : 
var6 =  cons : java2.util2.Vector.<init>(int) : var5 
var7 =  prim : int:1 : 
var8 =  method : java2.util2.Vector.add(java.lang.Object) : var6 var7 
var9 =  method : java2.util2.Vector.addElement(java.lang.Object) : var2 var8 
var10 =  prim : int:0 : 
var11 =  cons : java2.util2.Vector.<init>(int) : var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Vector.addElement(java.lang.Object) : var11 var0 
var14 =  prim : int:0 : 
var15 =  cons : java2.util2.Vector.<init>(int) : var14 
var16 =  method : java2.util2.Vector.addElement(java.lang.Object) : var11 var15 
var17 =  prim : int:0 : 
var18 =  cons : java2.util2.Vector.<init>(int) : var17 
var19 =  prim : int:0 : 
var20 =  prim : double:10.0 : 
var21 =  method : java2.util2.Vector.add(int,java.lang.Object) : var18 var19 var20 
var22 =  method : java2.util2.Vector.elements() : var18 
var23 =  prim : int:0 : 
var24 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var11 var22 var23 
var25 =  method : java2.util2.Vector.equals(java.lang.Object) : var2 var11 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.Vector.<init>(int) : var4 
var6 =  prim : int:1 : 
var7 =  method : java2.util2.Vector.add(java.lang.Object) : var5 var6 
var8 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var7 
var9 =  prim : int:0 : 
var10 =  cons : java2.util2.Vector.<init>(int) : var9 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var11 
var13 =  prim : int:0 : 
var14 =  cons : java2.util2.Vector.<init>(int) : var13 
var15 =  method : java2.util2.Vector.addElement(java.lang.Object) : var10 var14 
var16 =  prim : int:0 : 
var17 =  cons : java2.util2.Vector.<init>(int) : var16 
var18 =  prim : int:0 : 
var19 =  prim : double:10.0 : 
var20 =  method : java2.util2.Vector.add(int,java.lang.Object) : var17 var18 var19 
var21 =  method : java2.util2.Vector.elements() : var17 
var22 =  prim : int:0 : 
var23 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var10 var2 var22 
var24 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var10 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim replace with var2 -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:100 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:100 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var2 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  prim : int:0 : 
var2 =  cons : java2.util2.Vector.<init>(int) : var1 
var3 =  prim : int:0 : 
var4 =  prim : double:10.0 : 
var5 =  method : java2.util2.Vector.add(int,java.lang.Object) : var2 var3 var0 
var6 =  prim : java.lang.String:"" : 
var7 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var2 var6 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  prim : int:0 : 
var2 =  cons : java2.util2.Vector.<init>(int) : var1 
var3 =  prim : int:0 : 
var4 =  prim : double:10.0 : 
var5 =  method : java2.util2.Vector.add(int,java.lang.Object) : var2 var3 var4 
var6 =  prim : java.lang.String:"" : 
var7 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var2 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.String:"" : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.WeakHashMap.<init>() : 
var1 =  prim : byte:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.ArrayList.ensureCapacity(int) : var0 var3 
var5 =  method : java2.util2.ArrayList.size() : var0 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var0 var1 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.ArrayList.ensureCapacity(int) : var0 var3 
var5 =  cons : java2.util2.ArrayList.<init>(java2.util2.Collection) : var0 
var6 =  method : java2.util2.Collections.reverseOrder() : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var5 var6 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.ArrayList.ensureCapacity(int) : var0 var3 
var5 =  cons : java2.util2.ArrayList.<init>(java2.util2.Collection) : var0 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var5 var5 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.ArrayList.<init>() : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var6 var7 
var9 =  method : java2.util2.ArrayList.size() : var6 
var10 =  method : java2.util2.Collections.reverseOrder() : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var6 var10 
var13 =  method : java2.util2.ArrayList.trimToSize() : var6 
var14 =  method : java2.util2.AbstractList.listIterator() : var6 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var6 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var6 var17 
var19 =  method : java2.util2.AbstractList.listIterator() : var6 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var6 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.ArrayList.<init>() : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var6 var7 
var9 =  method : java2.util2.ArrayList.size() : var6 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var6 var10 
var12 =  method : java2.util2.ArrayList.trimToSize() : var6 
var13 =  method : java2.util2.AbstractList.listIterator() : var6 
var14 =  method : java2.util2.Collections.reverseOrder() : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var6 var14 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var6 var17 
var19 =  method : java2.util2.AbstractList.listIterator() : var6 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var6 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.ArrayList.<init>() : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var6 var7 
var9 =  method : java2.util2.ArrayList.size() : var6 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var6 var10 
var12 =  method : java2.util2.ArrayList.trimToSize() : var6 
var13 =  method : java2.util2.AbstractList.listIterator() : var6 
var14 =  prim : java.lang.Object:null : 
var15 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var6 var14 
var16 =  method : java2.util2.Collections.reverseOrder() : 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var6 var16 
var19 =  method : java2.util2.AbstractList.listIterator() : var6 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var6 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  cons : java.lang.Object.<init>() : 
var3 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var4 =  method : java2.util2.ArrayList.size() : var0 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.ArrayList.<init>() : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.ArrayList.add(java.lang.Object) : var7 var8 
var10 =  method : java2.util2.ArrayList.size() : var7 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var7 var11 
var13 =  method : java2.util2.ArrayList.trimToSize() : var7 
var14 =  method : java2.util2.AbstractList.listIterator() : var7 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var7 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var7 var17 
var19 =  method : java2.util2.AbstractList.listIterator() : var7 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var7 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  method : java2.util2.Collections.reverseOrder() : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var4 
var7 =  cons : java2.util2.ArrayList.<init>() : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.ArrayList.add(java.lang.Object) : var7 var8 
var10 =  method : java2.util2.ArrayList.size() : var7 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var7 var11 
var13 =  method : java2.util2.ArrayList.trimToSize() : var7 
var14 =  method : java2.util2.AbstractList.listIterator() : var7 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var7 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var7 var17 
var19 =  method : java2.util2.AbstractList.listIterator() : var7 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var1 
var6 =  cons : java2.util2.ArrayList.<init>() : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var6 var7 
var9 =  method : java2.util2.ArrayList.size() : var6 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var6 var10 
var12 =  method : java2.util2.ArrayList.trimToSize() : var6 
var13 =  method : java2.util2.AbstractList.listIterator() : var6 
var14 =  prim : java.lang.Object:null : 
var15 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var6 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var6 var16 
var18 =  method : java2.util2.AbstractList.listIterator() : var6 
var19 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var6 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.ArrayList.<init>() : 
var2 =  cons : java.lang.Object.<init>() : 
var3 =  method : java2.util2.ArrayList.add(java.lang.Object) : var1 var2 
var4 =  method : java2.util2.ArrayList.size() : var1 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var1 var0 
var7 =  cons : java2.util2.ArrayList.<init>() : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.ArrayList.add(java.lang.Object) : var7 var8 
var10 =  method : java2.util2.ArrayList.size() : var7 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var7 var11 
var13 =  method : java2.util2.ArrayList.trimToSize() : var7 
var14 =  method : java2.util2.AbstractList.listIterator() : var7 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var7 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var7 var17 
var19 =  method : java2.util2.AbstractList.listIterator() : var7 
var20 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var1 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.size() : var0 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.ArrayList.<init>() : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.ArrayList.add(java.lang.Object) : var6 var1 
var9 =  method : java2.util2.ArrayList.size() : var6 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var6 var10 
var12 =  method : java2.util2.ArrayList.trimToSize() : var6 
var13 =  method : java2.util2.AbstractList.listIterator() : var6 
var14 =  prim : java.lang.Object:null : 
var15 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var6 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.AbstractCollection.remove(java.lang.Object) : var6 var16 
var18 =  method : java2.util2.AbstractList.listIterator() : var6 
var19 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var6 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.clone() : var0 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.ArrayList.contains(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  method : java2.util2.ArrayList.add(java.lang.Object) : var0 var1 
var3 =  method : java2.util2.ArrayList.clone() : var0 
var4 =  cons : java2.util2.ArrayList.<init>() : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.ArrayList.add(java.lang.Object) : var4 var5 
var7 =  prim : int:0 : 
var8 =  method : java2.util2.ArrayList.ensureCapacity(int) : var4 var7 
var9 =  method : java2.util2.ArrayList.toArray() : var4 
var10 =  method : java2.util2.ArrayList.indexOf(java.lang.Object) : var0 var9 
var11 =  method : java2.util2.AbstractList.listIterator() : var0 
var12 =  method : java2.util2.ArrayList.clone() : var0 
var13 =  prim : char:23 : 
var14 =  method : java2.util2.ArrayList.lastIndexOf(java.lang.Object) : var0 var1 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  method : java2.util2.ArrayList.toArray() : var0 
var2 =  prim : [Ljava.lang.Object;:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java2.util2.Comparator:null : 
var5 =  method : java2.util2.Arrays.binarySearch([Ljava.lang.Object;,java.lang.Object,java2.util2.Comparator) : var1 var3 var4 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : [Ljava.lang.Object;:null : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java2.util2.Comparator:null : 
var4 =  method : java2.util2.Arrays.binarySearch([Ljava.lang.Object;,java.lang.Object,java2.util2.Comparator) : var0 var1 var3 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : [Ljava.lang.Object;:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.reverseOrder() : 
var3 =  prim : java2.util2.Comparator:null : 
var4 =  method : java2.util2.Arrays.binarySearch([Ljava.lang.Object;,java.lang.Object,java2.util2.Comparator) : var0 var1 var2 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  method : java2.util2.ArrayList.toArray() : var0 
var2 =  prim : [Ljava.lang.Object;:null : 
var3 =  prim : short:1 : 
var4 =  array : java.lang.Object[1] : var3 
var5 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var1 var4 
var6 =  prim : java2.util2.Comparator:null : 
var7 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var4 var6 
var8 =  prim : java2.util2.Comparator:null : 
var9 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var4 var8 
var10 =  prim : [Ljava.lang.Object;:null : 
var11 =  prim : short:1 : 
var12 =  array : java.lang.Object[1] : var11 
var13 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var10 var12 
var14 =  prim : java2.util2.Comparator:null : 
var15 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var12 var14 
var16 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var4 var12 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  method : java2.util2.ArrayList.toArray() : var0 
var2 =  prim : [Ljava.lang.Object;:null : 
var3 =  prim : short:1 : 
var4 =  array : java.lang.Object[1] : var3 
var5 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var1 var4 
var6 =  prim : java2.util2.Comparator:null : 
var7 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var4 var6 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : [Ljava.lang.Object;:null : 
var1 =  prim : short:1 : 
var2 =  array : java.lang.Object[1] : var1 
var3 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var0 var2 
var4 =  method : java2.util2.Collections.reverseOrder() : 
var5 =  prim : java2.util2.Comparator:null : 
var6 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var2 var4 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.ArrayList.<init>() : 
var1 =  method : java2.util2.ArrayList.toArray() : var0 
var2 =  prim : [Ljava.lang.Object;:null : 
var3 =  prim : short:1 : 
var4 =  array : java.lang.Object[1] : var3 
var5 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var1 var4 
var6 =  prim : java2.util2.Comparator:null : 
var7 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var4 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:0 : 
var10 =  prim : java2.util2.Comparator:null : 
var11 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,int,int,java2.util2.Comparator) : var4 var8 var9 var10 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : [Ljava.lang.Object;:null : 
var1 =  prim : short:1 : 
var2 =  array : java.lang.Object[1] : var1 
var3 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var0 var2 
var4 =  method : java2.util2.Collections.reverseOrder() : 
var5 =  prim : java2.util2.Comparator:null : 
var6 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var2 var4 
var7 =  prim : int:0 : 
var8 =  prim : int:0 : 
var9 =  prim : java2.util2.Comparator:null : 
var10 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,int,int,java2.util2.Comparator) : var2 var7 var8 var9 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : [Ljava.lang.Object;:null : 
var1 =  prim : short:1 : 
var2 =  array : java.lang.Object[1] : var1 
var3 =  method : java2.util2.Arrays.equals([Ljava.lang.Object;,[Ljava.lang.Object;) : var0 var2 
var4 =  prim : java2.util2.Comparator:null : 
var5 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,java2.util2.Comparator) : var2 var4 
var6 =  prim : int:0 : 
var7 =  prim : int:0 : 
var8 =  method : java2.util2.Collections.reverseOrder() : 
var9 =  prim : java2.util2.Comparator:null : 
var10 =  method : java2.util2.Arrays.sort([Ljava.lang.Object;,int,int,java2.util2.Comparator) : var2 var6 var7 var8 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : java2.util2.BitSet:null : 
var2 =  method : java2.util2.BitSet.and(java2.util2.BitSet) : var0 var0 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:1 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:2 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim replace with var3 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:1 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:1 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:10 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:10 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:100 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:100 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:1000 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:1000 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:10000 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var3
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:10000 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:-1 : 
var4 =  prim : int:100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:1 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:2 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim replace with var4 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:0 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:-100 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:0 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var4
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:101 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var4
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:1 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var4
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:110 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim set to var4
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim plus var4
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:200 : 
var5 =  method : java2.util2.BitSet.clear(int,int) : var0 var3 var4 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int) : var0 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim replace with var2 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:-1 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:10 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:10 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  cons : java2.util2.BitSet.<init>() : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int) : var1 var2 
var4 =  method : java2.util2.BitSet.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:2 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim replace with var1 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:-1 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:2 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:11 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:101 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:100 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1001 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1000 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10001 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10000 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:0 : 
var2 =  prim : int:100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:2 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim replace with var2 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:-100 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:0 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:101 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:1 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:110 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:10 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:1 : 
var2 =  prim : int:200 : 
var3 =  method : java2.util2.BitSet.flip(int,int) : var0 var1 var2 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : java2.util2.BitSet:null : 
var2 =  method : java2.util2.BitSet.or(java2.util2.BitSet) : var0 var0 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:1 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:2 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim replace with var12 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:1 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:1 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:10 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:10 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:100 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:100 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:1000 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:1000 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:10000 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:10000 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:-1 : 
var13 =  prim : int:100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim replace with 1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:1 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# primt replace 1 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:2 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim replace with var13 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:0 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:-100 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:0 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var13
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:101 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var13
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:1 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var13
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:110 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim set to var13
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:10 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim plus var13
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:100 : 
var9 =  method : java2.util2.BitSet.flip(int) : var0 var8 
var10 =  prim : int:0 : 
var11 =  method : java2.util2.BitSet.flip(int) : var0 var10 
var12 =  prim : int:0 : 
var13 =  prim : int:200 : 
var14 =  method : java2.util2.BitSet.set(int,int) : var0 var12 var13 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:0 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim replace with var12 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:-1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:-100 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:0 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:101 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:110 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:10 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:200 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:100 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1100 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1000 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:10100 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:10000 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:0 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim replace with var12 -1
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:-1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:-100 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:0 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:101 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim set to var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:1 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# prim plus var12
START SEQUENCE
var0 =  cons : java2.util2.BitSet.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.BitSet.flip(int) : var0 var1 
var3 =  prim : int:0 : 
var4 =  prim : int:10 : 
var5 =  method : java2.util2.BitSet.flip(int,int) : var0 var3 var4 
var6 =  prim : int:0 : 
var7 =  method : java2.util2.BitSet.clear(int) : var0 var6 
var8 =  prim : int:0 : 
var9 =  prim : int:10 : 
var10 =  method : java2.util2.BitSet.get(int,int) : var0 var8 var9 
var11 =  prim : int:0 : 
var12 =  prim : int:110 : 
var13 =  method : java2.util2.BitSet.flip(int,int) : var10 var11 var12 
var14 =  prim : int:10 : 
var15 =  method : java2.util2.BitSet.nextClearBit(int) : var10 var14 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:10 : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var5 
var8 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var3 var7 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:10 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  method : java2.util2.Collections.reverseOrder() : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var5 
var8 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var2 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:10 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var6 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var7 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var2 var6 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:10 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var5 
var8 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var3 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:10 : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var6 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var7 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var3 var6 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:10 : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var0 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var5 
var8 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var4 var7 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:10 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var2 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var6 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var7 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var4 var6 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var6 =  prim : int:1 : 
var7 =  prim : int:100 : 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.Collections.singleton(java.lang.Object) : var8 
var10 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var9 
var11 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var7 var10 
var12 =  prim : long:1 : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var11 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var16 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var11 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var11 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var11 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var31 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var9 
var11 =  prim : long:1 : 
var12 =  method : java2.util2.Collections.reverseOrder() : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var12 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var16 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var10 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var31 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var9 
var11 =  prim : long:1 : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var15 =  method : java2.util2.Collections.reverseOrder() : 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var15 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var10 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var31 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  prim : java2.util2.Collection:null : 
var10 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var11 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var9 
var12 =  prim : long:1 : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var11 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var16 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var11 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var11 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var11 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var31 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var0 
var11 =  prim : long:1 : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : int:100 : 
var17 =  prim : short:10 : 
var18 =  method : java2.util2.Collections.singleton(java.lang.Object) : var17 
var19 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var18 
var20 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var16 var19 
var21 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var20 
var22 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var20 
var23 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var15 var20 
var24 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var25 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var26 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var10 
var27 =  prim : int:0 : 
var28 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var26 var27 
var29 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var26 
var30 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var26 
var31 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var30 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var6 =  prim : int:1 : 
var7 =  prim : int:100 : 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.Collections.singleton(java.lang.Object) : var8 
var10 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var9 
var11 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var7 var0 
var12 =  prim : long:1 : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var11 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var16 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var11 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var11 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var11 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var31 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var9 
var11 =  prim : long:1 : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var0 
var14 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : int:100 : 
var17 =  prim : short:10 : 
var18 =  method : java2.util2.Collections.singleton(java.lang.Object) : var17 
var19 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var18 
var20 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var16 var19 
var21 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var20 
var22 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var20 
var23 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var15 var20 
var24 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var25 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var26 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var10 
var27 =  prim : int:0 : 
var28 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var26 var27 
var29 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var26 
var30 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var26 
var31 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var30 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var6 =  prim : int:1 : 
var7 =  prim : int:100 : 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.Collections.singleton(java.lang.Object) : var8 
var10 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var9 
var11 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var7 var10 
var12 =  prim : long:1 : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var12 var0 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var11 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var16 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var11 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var11 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var11 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var31 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var3 
var5 =  prim : int:1 : 
var6 =  prim : int:100 : 
var7 =  prim : short:10 : 
var8 =  method : java2.util2.Collections.singleton(java.lang.Object) : var7 
var9 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var8 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var9 
var11 =  prim : long:1 : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : int:100 : 
var17 =  prim : short:10 : 
var18 =  method : java2.util2.Collections.singleton(java.lang.Object) : var17 
var19 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var18 
var20 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var16 var19 
var21 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var20 
var22 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var20 
var23 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var0 var20 
var24 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var25 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var26 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var5 var10 
var27 =  prim : int:0 : 
var28 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var26 var27 
var29 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var26 
var30 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var26 
var31 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var3 var30 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var5 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var6 =  prim : int:1 : 
var7 =  prim : int:100 : 
var8 =  prim : short:10 : 
var9 =  method : java2.util2.Collections.singleton(java.lang.Object) : var8 
var10 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var9 
var11 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var7 var10 
var12 =  prim : long:1 : 
var13 =  prim : java.lang.Object:null : 
var14 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var11 
var16 =  prim : java.lang.Object:null : 
var17 =  prim : int:100 : 
var18 =  prim : short:10 : 
var19 =  method : java2.util2.Collections.singleton(java.lang.Object) : var18 
var20 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var19 
var21 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var17 var20 
var22 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var21 
var23 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var21 
var24 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var11 var0 var21 
var25 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var11 
var26 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var11 
var27 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var6 var11 
var28 =  prim : int:0 : 
var29 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var27 var28 
var30 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var27 
var31 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var27 
var32 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var31 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var2 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var6 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var4 
var7 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var6 
var8 =  prim : int:1 : 
var9 =  prim : int:100 : 
var10 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var9 var2 
var11 =  prim : long:1 : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var10 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : int:100 : 
var17 =  prim : short:10 : 
var18 =  method : java2.util2.Collections.singleton(java.lang.Object) : var17 
var19 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var18 
var20 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var16 var19 
var21 =  method : java2.util2.Collections.synchronizedCollection(java2.util2.Collection) : var20 
var22 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var20 
var23 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var10 var15 var20 
var24 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var10 
var25 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var10 
var26 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var8 var10 
var27 =  prim : int:0 : 
var28 =  method : java2.util2.Collections.rotate(java2.util2.List,int) : var26 var27 
var29 =  method : java2.util2.Collections.synchronizedList(java2.util2.List) : var26 
var30 =  method : java2.util2.Collections.unmodifiableList(java2.util2.List) : var26 
var31 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var6 var30 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  method : java2.util2.Collections.reverseOrder() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var15 var16 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  method : java2.util2.Collections.reverseOrder() : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  method : java2.util2.Collections.reverseOrder() : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var15 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var3 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var2 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : char:34 : 
var13 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var12 
var14 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var7 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : double:0.0 : 
var17 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var15 var16 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var17 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var3 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : char:34 : 
var13 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var12 
var14 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var7 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : double:0.0 : 
var17 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var2 var16 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var17 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var3 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : char:34 : 
var13 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var12 
var14 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var7 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : double:0.0 : 
var17 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var15 var16 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var2 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var3 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : char:34 : 
var13 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var12 
var14 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var7 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : double:0.0 : 
var17 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var15 var16 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var17 var2 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var6 =  prim : long:1 : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var3 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var6 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var0 
var7 =  prim : long:1 : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var7 var4 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var6 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var6 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var15 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var6 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var0 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var15 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var6 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var0 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var6 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var15 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var3 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var6 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var0 
var7 =  prim : long:1 : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var7 var8 
var10 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var6 
var11 =  prim : char:34 : 
var12 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var6 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var4 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var15 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var11 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var6 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var0 
var10 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var11 =  prim : char:34 : 
var12 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var12 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var7 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var15 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var12 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var0 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : char:34 : 
var10 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var9 
var11 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var4 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:0.0 : 
var14 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var14 var12 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : char:34 : 
var11 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var5 var11 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:0.0 : 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var15 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var3 var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var5 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : char:34 : 
var13 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var12 
var14 =  method : java2.util2.Collections.lastIndexOfSubList(java2.util2.List,java2.util2.List) : var7 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var5 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  method : java2.util2.Collections.reverseOrder() : 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var16 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  method : java2.util2.Collections.reverseOrder() : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var10 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var12 var17 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  method : java2.util2.Collections.reverseOrder() : 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var12 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var3 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var2 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : short:10 : 
var14 =  method : java2.util2.Collections.singleton(java.lang.Object) : var13 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var16 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var17 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var18 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var14 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var14 var19 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var3 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : short:10 : 
var14 =  method : java2.util2.Collections.singleton(java.lang.Object) : var13 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var16 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var17 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var18 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var2 var14 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var14 var19 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var3 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var3 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : short:10 : 
var14 =  method : java2.util2.Collections.singleton(java.lang.Object) : var13 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var16 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var17 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var18 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var2 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var2 var19 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var3 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : short:10 : 
var1 =  method : java2.util2.Collections.singleton(java.lang.Object) : var0 
var2 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var1 
var3 =  prim : int:100 : 
var4 =  prim : short:10 : 
var5 =  method : java2.util2.Collections.singleton(java.lang.Object) : var4 
var6 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var5 
var7 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var3 var6 
var8 =  prim : long:1 : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var7 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : short:10 : 
var14 =  method : java2.util2.Collections.singleton(java.lang.Object) : var13 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var16 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var17 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var14 
var18 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var12 var14 
var19 =  prim : java.lang.Object:null : 
var20 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var7 var14 var2 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var6 =  prim : long:1 : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var3 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var6 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var0 
var7 =  prim : long:1 : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var7 var4 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var6 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var10 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var12 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var6 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var0 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var12 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var6 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var10 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var12 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var3 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var6 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var0 
var7 =  prim : long:1 : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var7 var8 
var10 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var6 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var4 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var12 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var6 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var0 
var10 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var7 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var12 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var4 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var3 
var5 =  prim : long:1 : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var4 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : short:10 : 
var11 =  method : java2.util2.Collections.singleton(java.lang.Object) : var10 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var11 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var9 var11 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var4 var11 var9 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : int:100 : 
var2 =  prim : short:10 : 
var3 =  method : java2.util2.Collections.singleton(java.lang.Object) : var2 
var4 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var3 
var5 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var1 var4 
var6 =  prim : long:1 : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var5 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : short:10 : 
var12 =  method : java2.util2.Collections.singleton(java.lang.Object) : var11 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var15 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var12 
var16 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var10 var12 
var17 =  prim : java.lang.Object:null : 
var18 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var5 var12 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : short:10 : 
var2 =  method : java2.util2.Collections.singleton(java.lang.Object) : var1 
var3 =  prim : short:10 : 
var4 =  method : java2.util2.Collections.singleton(java.lang.Object) : var3 
var5 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var2 
var6 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var4 
var7 =  prim : long:1 : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var7 var8 
var10 =  method : java2.util2.Collections.enumeration(java2.util2.Collection) : var6 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var13 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var14 =  method : java2.util2.Collections.unmodifiableCollection(java2.util2.Collection) : var4 
var15 =  method : java2.util2.Collections.singletonMap(java.lang.Object,java.lang.Object) : var11 var4 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var6 var4 var16 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : long:-1 : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  prim : double:10.0 : 
var3 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var4 =  method : java2.util2.Collections.indexOfSubList(java2.util2.List,java2.util2.List) : var1 var3 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var3 =  prim : char:20 : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var2 var3 var4 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  prim : char:20 : 
var3 =  method : java2.util2.Collections.reverseOrder() : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var1 var2 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  prim : char:20 : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var1 var0 var3 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  prim : char:20 : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var2 var0 var4 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var2 =  prim : char:20 : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var1 var2 var0 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var1 
var3 =  prim : char:20 : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var2 var3 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : char:20 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.singletonList(java.lang.Object) : var0 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Collections.replaceAll(java2.util2.List,java.lang.Object,java.lang.Object) : var2 var0 var3 

END SEQUENCE
# prim replace with 100
START SEQUENCE
var0 =  prim : int:100 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  method : java2.util2.Collections.shuffle(java2.util2.List) : var2 

END SEQUENCE
# prim replace with 4
START SEQUENCE
var0 =  prim : int:4 : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.nCopies(int,java.lang.Object) : var0 var1 
var3 =  method : java2.util2.Collections.shuffle(java2.util2.List) : var2 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim replace with 1073741824
START SEQUENCE
var0 =  prim : int:1073741824 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>(int) : var0 

END SEQUENCE
# primt replace 1073741824 +1
START SEQUENCE
var0 =  prim : int:1073741825 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>(int) : var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashSet.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.IdentityHashMap.<init>() : 
var1 =  prim : float:100.0 : 
var2 =  method : java2.util2.IdentityHashMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:1000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim plus var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim set to var1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:10000 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:-1 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : int:0 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  method : java2.util2.Collections.reverseOrder() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var10 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var18 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.Collections.reverseOrder() : 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var16 
var18 =  method : java2.util2.HashMap.keySet() : var10 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var18 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  method : java2.util2.Collections.reverseOrder() : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var18 =  method : java2.util2.HashMap.keySet() : var10 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var18 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var18 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  method : java2.util2.Collections.reverseOrder() : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var1 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var1 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var1 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var1 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var1 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : double:0.0 : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var1 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : double:0.0 : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var2 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var2 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var2 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var2 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var2 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var2 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : double:0.0 : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  cons : java.lang.Object.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var1 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  cons : java.lang.Object.<init>() : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : int:10 : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var2 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  cons : java.lang.Object.<init>() : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : int:10 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var2 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  cons : java.lang.Object.<init>() : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : int:10 : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var3 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var5 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var5 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var5 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var5 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var5 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java.lang.Object.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var2 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var2 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var3 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  prim : java.lang.Object:null : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var5 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  prim : java.lang.Object:null : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var6 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var8 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var8 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var8 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var8 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var2 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var0 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var4 
var6 =  prim : java.lang.Object:null : 
var7 =  prim : double:0.0 : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var2 var7 
var9 =  prim : int:10 : 
var10 =  cons : java.lang.Object.<init>() : 
var11 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var9 var10 
var12 =  method : java2.util2.HashMap.isEmpty() : var3 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var2 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var0 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var5 
var7 =  prim : double:0.0 : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var2 
var9 =  prim : int:10 : 
var10 =  cons : java.lang.Object.<init>() : 
var11 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var9 var10 
var12 =  method : java2.util2.HashMap.isEmpty() : var3 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var5 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var6 
var9 =  method : java2.util2.HashMap.isEmpty() : var0 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : double:0.0 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  prim : int:10 : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var8 
var10 =  cons : java.lang.Object.<init>() : 
var11 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var7 var2 
var12 =  method : java2.util2.HashMap.isEmpty() : var3 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var9 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : double:0.0 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  prim : int:10 : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var7 var8 
var10 =  method : java2.util2.HashMap.isEmpty() : var3 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var11 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var2 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var9 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : double:0.0 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  prim : int:10 : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var7 var8 
var10 =  method : java2.util2.HashMap.isEmpty() : var3 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var11 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var2 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var9 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : double:0.0 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  prim : int:10 : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var7 var8 
var10 =  method : java2.util2.HashMap.isEmpty() : var3 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var11 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var2 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var20 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var9 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var1 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : double:0.0 : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  prim : int:10 : 
var8 =  cons : java.lang.Object.<init>() : 
var9 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var7 var8 
var10 =  method : java2.util2.HashMap.isEmpty() : var3 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var3 var11 
var13 =  cons : java2.util2.LinkedHashMap.<init>() : 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var13 var17 var18 
var20 =  method : java2.util2.HashMap.keySet() : var13 
var21 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var3 var2 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var1 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var2 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var2 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var3 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  prim : java.lang.Object:null : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var5 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  prim : java.lang.Object:null : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var6 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var8 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var9 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var9 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var10 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var11 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var11 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var1 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var2 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var2 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var3 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  prim : java.lang.Object:null : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var5 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  prim : java.lang.Object:null : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var6 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var8 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var9 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var9 var15 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var10 var16 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var14 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var0 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var14 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var1 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var2 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var2 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var3 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  prim : java.lang.Object:null : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var8 =  method : java2.util2.HashMap.isEmpty() : var0 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var5 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  prim : java.lang.Object:null : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var0 
var9 =  method : java2.util2.HashMap.isEmpty() : var1 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var10 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var6 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var8 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var0 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var9 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var9 
var17 =  method : java2.util2.HashMap.keySet() : var11 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var12 =  cons : java2.util2.LinkedHashMap.<init>() : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var13 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var12 var16 var10 
var18 =  method : java2.util2.HashMap.keySet() : var12 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var15 var11 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : java.lang.Object:null : 
var14 =  prim : double:-1.0 : 
var15 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var14 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var16 var12 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var14 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var17 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var0 var15 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var18 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : double:0.0 : 
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : int:10 : 
var5 =  cons : java.lang.Object.<init>() : 
var6 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var4 var5 
var7 =  method : java2.util2.HashMap.isEmpty() : var0 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.LinkedHashMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : double:-1.0 : 
var13 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var10 var14 var15 
var17 =  method : java2.util2.HashMap.keySet() : var10 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var15 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : int:10 : 
var6 =  cons : java.lang.Object.<init>() : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var5 var6 
var8 =  method : java2.util2.HashMap.isEmpty() : var1 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var1 var9 
var11 =  cons : java2.util2.LinkedHashMap.<init>() : 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var11 var15 var16 
var18 =  method : java2.util2.HashMap.keySet() : var11 
var19 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  cons : java2.util2.LinkedHashMap.<init>() : 
var2 =  method : java2.util2.HashMap.keySet() : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var2 var4 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var0 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var1 var15 var16 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  method : java2.util2.HashMap.keySet() : var0 
var2 =  cons : java2.util2.LinkedHashMap.<init>() : 
var3 =  cons : java2.util2.LinkedHashMap.<init>() : 
var4 =  method : java2.util2.HashMap.keySet() : var3 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : double:0.0 : 
var7 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var2 var1 var6 
var8 =  prim : int:10 : 
var9 =  cons : java.lang.Object.<init>() : 
var10 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var2 var8 var9 
var11 =  method : java2.util2.HashMap.isEmpty() : var2 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var2 var12 
var14 =  prim : java.lang.Object:null : 
var15 =  prim : double:-1.0 : 
var16 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var14 var15 
var17 =  prim : java.lang.Object:null : 
var18 =  prim : java.lang.Object:null : 
var19 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var3 var17 var18 
var20 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var2 var4 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  cons : java2.util2.LinkedHashMap.<init>() : 
var3 =  method : java2.util2.HashMap.keySet() : var2 
var4 =  prim : double:0.0 : 
var5 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var6 =  prim : int:10 : 
var7 =  cons : java.lang.Object.<init>() : 
var8 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var6 var7 
var9 =  method : java2.util2.HashMap.isEmpty() : var0 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.LinkedHashMap.get(java.lang.Object) : var0 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  prim : double:-1.0 : 
var14 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var2 var12 var13 
var15 =  prim : java.lang.Object:null : 
var16 =  prim : java.lang.Object:null : 
var17 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var2 var15 var16 
var18 =  method : java2.util2.LinkedHashMap.containsValue(java.lang.Object) : var0 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedHashSet.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : byte:-1 : 
var2 =  method : java2.util2.AbstractList.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : char:20 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var1 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : double:0.0 : 
var9 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var0 var8 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : char:20 : 
var1 =  cons : java2.util2.LinkedList.<init>() : 
var2 =  prim : char:20 : 
var3 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.LinkedList.<init>() : 
var6 =  prim : char:20 : 
var7 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var5 var0 
var8 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var1 var4 var5 
var9 =  prim : double:0.0 : 
var10 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var1 var9 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : char:20 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var5 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  prim : double:0.0 : 
var9 =  method : java2.util2.LinkedList.lastIndexOf(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : char:20 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var1 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  cons : java2.util2.LinkedList.<init>() : 
var9 =  prim : char:20 : 
var10 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var8 var9 
var11 =  prim : int:0 : 
var12 =  cons : java2.util2.LinkedList.<init>() : 
var13 =  prim : char:20 : 
var14 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var12 var13 
var15 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var8 var11 var12 
var16 =  method : java2.util2.AbstractList.listIterator() : var12 
var17 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var0 var16 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : char:20 : 
var1 =  cons : java2.util2.LinkedList.<init>() : 
var2 =  prim : char:20 : 
var3 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var1 var2 
var4 =  prim : int:0 : 
var5 =  cons : java2.util2.LinkedList.<init>() : 
var6 =  prim : char:20 : 
var7 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var5 var0 
var8 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var1 var4 var5 
var9 =  cons : java2.util2.LinkedList.<init>() : 
var10 =  prim : char:20 : 
var11 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var9 var10 
var12 =  prim : int:0 : 
var13 =  cons : java2.util2.LinkedList.<init>() : 
var14 =  prim : char:20 : 
var15 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var13 var14 
var16 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var9 var12 var13 
var17 =  method : java2.util2.AbstractList.listIterator() : var13 
var18 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var1 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.LinkedList.<init>() : 
var1 =  prim : char:20 : 
var2 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var0 var1 
var3 =  prim : int:0 : 
var4 =  cons : java2.util2.LinkedList.<init>() : 
var5 =  prim : char:20 : 
var6 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var4 var5 
var7 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var0 var3 var4 
var8 =  cons : java2.util2.LinkedList.<init>() : 
var9 =  prim : char:20 : 
var10 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var8 var9 
var11 =  prim : int:0 : 
var12 =  cons : java2.util2.LinkedList.<init>() : 
var13 =  prim : char:20 : 
var14 =  method : java2.util2.LinkedList.addFirst(java.lang.Object) : var12 var13 
var15 =  method : java2.util2.LinkedList.addAll(int,java2.util2.Collection) : var8 var11 var12 
var16 =  method : java2.util2.AbstractList.listIterator() : var12 
var17 =  method : java2.util2.LinkedList.remove(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.Stack.<init>() : 
var1 =  prim : int:1 : 
var2 =  method : java2.util2.Vector.setSize(int) : var0 var1 
var3 =  prim : short:100 : 
var4 =  method : java2.util2.Vector.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  method : java2.util2.TreeMap.firstKey() : var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var8 =  method : java2.util2.TreeMap.lastKey() : var0 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  method : java2.util2.Collections.reverseOrder() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var12 
var14 =  method : java2.util2.TreeMap.size() : var9 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var9 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  method : java2.util2.TreeMap.firstKey() : var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var8 =  method : java2.util2.TreeMap.lastKey() : var0 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.Collections.reverseOrder() : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var14 =  method : java2.util2.TreeMap.size() : var9 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var9 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : char:23 : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  method : java2.util2.TreeMap.firstKey() : var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var8 =  method : java2.util2.TreeMap.lastKey() : var0 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.Object:null : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var14 =  method : java2.util2.TreeMap.size() : var9 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var9 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : char:23 : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.reverseOrder() : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : char:23 : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  method : java2.util2.TreeMap.firstKey() : var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var0 
var9 =  method : java2.util2.TreeMap.lastKey() : var0 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.Object:null : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.size() : var10 
var15 =  cons : java2.util2.TreeMap.<init>(java2.util2.SortedMap) : var10 
var16 =  method : java2.util2.TreeMap.keySet() : var15 
var17 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var15 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  method : java2.util2.Collections.reverseOrder() : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var14 =  method : java2.util2.TreeMap.keySet() : var9 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var14 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.Collections.reverseOrder() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  method : java2.util2.Collections.reverseOrder() : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  method : java2.util2.Collections.reverseOrder() : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var1 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var1 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var0 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var1 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var1 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var0 var2 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var2 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var0 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var2 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var0 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var3 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var3 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  cons : java2.util2.TreeMap.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  method : java2.util2.TreeMap.keySet() : var13 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var3 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  cons : java2.util2.TreeMap.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var13 var14 var3 
var17 =  method : java2.util2.TreeMap.keySet() : var13 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  cons : java2.util2.TreeMap.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  method : java2.util2.TreeMap.keySet() : var13 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var3 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  cons : java2.util2.TreeMap.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  method : java2.util2.TreeMap.keySet() : var13 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var1 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var2 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var2 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var3 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var3 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var4 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var4 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var0 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var4 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var1 
var13 =  method : java2.util2.TreeMap.keySet() : var10 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var0 var4 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var6 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  cons : java2.util2.TreeMap.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var11 var12 var2 
var14 =  method : java2.util2.TreeMap.keySet() : var11 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var2 
var13 =  method : java2.util2.TreeMap.keySet() : var10 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var0 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var6 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  cons : java2.util2.TreeMap.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var11 var12 var3 
var14 =  method : java2.util2.TreeMap.keySet() : var11 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var3 
var13 =  method : java2.util2.TreeMap.keySet() : var10 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var6 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  cons : java2.util2.TreeMap.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var11 var12 var4 
var14 =  method : java2.util2.TreeMap.keySet() : var11 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var4 
var13 =  method : java2.util2.TreeMap.keySet() : var10 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var0 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  cons : java2.util2.TreeMap.<init>() : 
var12 =  prim : java.lang.String:"hi!" : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var11 var12 var5 
var14 =  method : java2.util2.TreeMap.keySet() : var11 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var14 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var11 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java.lang.Object:null : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.Object:null : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var1 var5 
var7 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var1 
var8 =  method : java2.util2.TreeMap.entrySet() : var7 
var9 =  method : java2.util2.TreeMap.entrySet() : var7 
var10 =  cons : java2.util2.TreeMap.<init>() : 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var10 var11 var12 
var14 =  method : java2.util2.TreeMap.keySet() : var10 
var15 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var7 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  prim : java.lang.String:"hi!" : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var2 var3 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var4 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  method : java2.util2.TreeMap.keySet() : var1 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  cons : java2.util2.TreeMap.<init>() : 
var6 =  prim : java.lang.String:"hi!" : 
var7 =  prim : java.lang.Object:null : 
var8 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var5 var6 var7 
var9 =  prim : java.lang.Object:null : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var3 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var12 
var14 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var15 =  method : java2.util2.TreeMap.entrySet() : var14 
var16 =  method : java2.util2.TreeMap.entrySet() : var14 
var17 =  method : java2.util2.TreeMap.keySet() : var5 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var14 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  cons : java2.util2.TreeMap.<init>() : 
var3 =  prim : java.lang.String:"hi!" : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var2 var3 var4 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var5 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  method : java2.util2.TreeMap.keySet() : var2 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  cons : java2.util2.TreeMap.<init>() : 
var7 =  prim : java.lang.String:"hi!" : 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var6 var7 var8 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var3 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var12 
var14 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var15 =  method : java2.util2.TreeMap.entrySet() : var14 
var16 =  method : java2.util2.TreeMap.entrySet() : var14 
var17 =  method : java2.util2.TreeMap.keySet() : var6 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var14 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  cons : java2.util2.TreeMap.<init>() : 
var4 =  prim : java.lang.String:"hi!" : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var3 var4 var5 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  method : java2.util2.TreeMap.keySet() : var3 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  cons : java2.util2.TreeMap.<init>() : 
var8 =  prim : java.lang.String:"hi!" : 
var9 =  prim : java.lang.Object:null : 
var10 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var7 var8 var9 
var11 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var12 
var14 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var15 =  method : java2.util2.TreeMap.entrySet() : var14 
var16 =  method : java2.util2.TreeMap.entrySet() : var14 
var17 =  method : java2.util2.TreeMap.keySet() : var7 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var14 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.String:"hi!" : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var7 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  method : java2.util2.TreeMap.keySet() : var4 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var13 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  cons : java2.util2.TreeMap.<init>() : 
var9 =  prim : java.lang.String:"hi!" : 
var10 =  prim : java.lang.Object:null : 
var11 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var8 var9 var10 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var3 
var14 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var15 =  method : java2.util2.TreeMap.entrySet() : var14 
var16 =  method : java2.util2.TreeMap.entrySet() : var14 
var17 =  method : java2.util2.TreeMap.keySet() : var8 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var14 var17 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var4 
var6 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var7 =  method : java2.util2.TreeMap.entrySet() : var6 
var8 =  method : java2.util2.TreeMap.entrySet() : var6 
var9 =  cons : java2.util2.TreeMap.<init>() : 
var10 =  prim : java.lang.String:"hi!" : 
var11 =  prim : java.lang.Object:null : 
var12 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var9 var10 var11 
var13 =  method : java2.util2.TreeMap.keySet() : var9 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var6 var12 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.String:"hi!" : 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  cons : java2.util2.TreeMap.<init>() : 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var4 var5 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var4 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var4 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  cons : java2.util2.TreeMap.<init>() : 
var14 =  prim : java.lang.String:"hi!" : 
var15 =  prim : java.lang.Object:null : 
var16 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var13 var14 var15 
var17 =  method : java2.util2.TreeMap.keySet() : var13 
var18 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  cons : java2.util2.TreeMap.<init>() : 
var2 =  method : java2.util2.TreeMap.keySet() : var1 
var3 =  prim : java.lang.Object:null : 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var2 var4 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var6 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var1 var11 var12 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  method : java2.util2.TreeMap.keySet() : var0 
var2 =  cons : java2.util2.TreeMap.<init>() : 
var3 =  cons : java2.util2.TreeMap.<init>() : 
var4 =  method : java2.util2.TreeMap.keySet() : var3 
var5 =  prim : java.lang.Object:null : 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var2 var1 var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var2 var8 
var10 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var2 
var11 =  method : java2.util2.TreeMap.entrySet() : var10 
var12 =  method : java2.util2.TreeMap.entrySet() : var10 
var13 =  prim : java.lang.String:"hi!" : 
var14 =  prim : java.lang.Object:null : 
var15 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var3 var13 var14 
var16 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var10 var4 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : java.lang.Object:null : 
var2 =  cons : java2.util2.TreeMap.<init>() : 
var3 =  method : java2.util2.TreeMap.keySet() : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var3 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var6 
var8 =  cons : java2.util2.TreeMap.<init>(java2.util2.Map) : var0 
var9 =  method : java2.util2.TreeMap.entrySet() : var8 
var10 =  method : java2.util2.TreeMap.entrySet() : var8 
var11 =  prim : java.lang.String:"hi!" : 
var12 =  prim : java.lang.Object:null : 
var13 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var2 var11 var12 
var14 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var8 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.TreeMap.<init>() : 
var1 =  prim : char:23 : 
var2 =  prim : float:10.0 : 
var3 =  method : java2.util2.TreeMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2 
var4 =  prim : float:-1.0 : 
var5 =  method : java2.util2.TreeMap.containsValue(java.lang.Object) : var0 var2 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var3 =  prim : byte:1 : 
var4 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var2 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java2.util2.Comparator:null : 
var1 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var2 =  prim : byte:1 : 
var3 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var1 var0 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : java2.util2.Comparator:null : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var1 
var3 =  prim : byte:1 : 
var4 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var2 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : java2.util2.Comparator:null : 
var1 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var2 =  prim : byte:1 : 
var3 =  method : java2.util2.AbstractSet.equals(java.lang.Object) : var1 var1 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var3 
var5 =  prim : int:-1 : 
var6 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var5 
var7 =  prim : java2.util2.Comparator:null : 
var8 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var7 
var9 =  method : java2.util2.AbstractCollection.retainAll(java2.util2.Collection) : var2 var8 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var3 =  prim : double:0.0 : 
var4 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var3 
var5 =  prim : double:-1.0 : 
var6 =  method : java2.util2.TreeSet.contains(java.lang.Object) : var2 var5 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var3 
var5 =  prim : int:-1 : 
var6 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var5 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  method : java2.util2.Collections.reverseOrder() : 
var1 =  prim : java2.util2.Comparator:null : 
var2 =  cons : java2.util2.TreeSet.<init>(java2.util2.Comparator) : var0 
var3 =  prim : int:0 : 
var4 =  method : java2.util2.TreeSet.add(java.lang.Object) : var2 var3 
var5 =  cons : java2.util2.TreeSet.<init>(java2.util2.Collection) : var2 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  method : java2.util2.Collections.reverseOrder() : 
var3 =  prim : java.lang.Object:null : 
var4 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var5 

END SEQUENCE
# make null non-null
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var4 =  method : java2.util2.Collections.reverseOrder() : 
var5 =  prim : java.lang.Object:null : 
var6 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var4 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var1 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var4 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  cons : java2.util2.Vector.<init>(int) : var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.addElement(java.lang.Object) : var3 var1 
var6 =  prim : java.lang.Object:null : 
var7 =  method : java2.util2.Vector.equals(java.lang.Object) : var3 var6 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var1 

END SEQUENCE
# make non-null null
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : java.lang.Object:null : 
var3 =  method : java2.util2.Vector.addElement(java.lang.Object) : var1 var2 
var4 =  prim : java.lang.Object:null : 
var5 =  method : java2.util2.Vector.add(java.lang.Object) : var1 var4 
var6 =  prim : int:0 : 
var7 =  cons : java2.util2.Vector.<init>(int) : var6 
var8 =  prim : java.lang.Object:null : 
var9 =  method : java2.util2.Vector.addElement(java.lang.Object) : var7 var8 
var10 =  prim : int:0 : 
var11 =  cons : java2.util2.Vector.<init>(int) : var10 
var12 =  method : java2.util2.Vector.addElement(java.lang.Object) : var7 var11 
var13 =  prim : int:0 : 
var14 =  prim : java2.util2.Vector:null : 
var15 =  cons : java2.util2.Vector.<init>(int) : var13 
var16 =  prim : int:0 : 
var17 =  method : java2.util2.Vector.insertElementAt(java.lang.Object,int) : var7 var14 var16 
var18 =  method : java2.util2.Vector.equals(java.lang.Object) : var1 var7 

END SEQUENCE
# prim replace with 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# primt replace 0 +1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim replace with var2 -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim negate
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set 0
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:100 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:100 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:1000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim plus var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim set to var2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:10000 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim -1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:-1 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var2 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var5 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  prim : int:0 : 
var2 =  cons : java2.util2.Vector.<init>(int) : var1 
var3 =  prim : int:0 : 
var4 =  prim : double:10.0 : 
var5 =  method : java2.util2.Vector.add(int,java.lang.Object) : var2 var3 var0 
var6 =  prim : boolean:true : 
var7 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var2 var6 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var2 

END SEQUENCE
# prim swap vars 1
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  prim : int:0 : 
var2 =  cons : java2.util2.Vector.<init>(int) : var1 
var3 =  prim : int:0 : 
var4 =  prim : double:10.0 : 
var5 =  method : java2.util2.Vector.add(int,java.lang.Object) : var2 var3 var4 
var6 =  prim : boolean:true : 
var7 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var2 var0 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  prim : int:0 : 
var1 =  cons : java2.util2.Vector.<init>(int) : var0 
var2 =  prim : int:0 : 
var3 =  prim : double:10.0 : 
var4 =  method : java2.util2.Vector.add(int,java.lang.Object) : var1 var2 var3 
var5 =  prim : boolean:true : 
var6 =  method : java2.util2.Vector.lastIndexOf(java.lang.Object) : var1 var3 

END SEQUENCE
# prim swap vars 2
START SEQUENCE
var0 =  cons : java2.util2.WeakHashMap.<init>() : 
var1 =  prim : byte:100 : 
var2 =  method : java2.util2.AbstractMap.equals(java.lang.Object) : var0 var0 

END SEQUENCE
