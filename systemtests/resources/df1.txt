
# Test input to DF. The frontier branch code is shown below.
# DF should report that var0 was compared with the value of MAXIMUM_CAPACITY.
#
#       public HashMap(int initialCapacity, float loadFactor) {
#           if (initialCapacity < 0)
#               throw new IllegalArgumentException("Illegal initial capacity: " +
#                                                  initialCapacity);
# F>        if (initialCapacity > MAXIMUM_CAPACITY)
#               initialCapacity = MAXIMUM_CAPACITY;
#           if (loadFactor <= 0 || Float.isNaN(loadFactor))


START RECORD
BRANCH
classname=java2.util2.HashMap,methodname=<init>,line=165,id=1,direction=false
SEQUENCE
var0 = prim : int:0 :
var1 = cons : java2.util2.HashMap.<init>(int) : var0
END RECORD

# DF should report that var4 is compared to null
# 
START RECORD
BRANCH
classname=java2.util2.HashMap,methodname=containsValue,line=621,id=34,direction=false
SEQUENCE
var0 =  cons : java2.util2.HashMap.<init>() :
var1 =  prim : java.lang.Object:null :
var2 =  prim : java.lang.Object:null :
var3 =  method : java2.util2.HashMap.put(java.lang.Object,java.lang.Object) : var0 var1 var2
var4 =  prim : char:20 :
var5 =  method : java2.util2.HashMap.containsValue(java.lang.Object) : var0 var4

END RECORD
